generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?
  role          UserRole        @default(USER)
  accounts      Account[]
  sessions      Session[]
  articles      Article[]
  comments      Comment[]
  bookmarks     Bookmark[]
  commentLikes  CommentLike[]
  likes         Like[]
  auditLogs     AuditLog[]
  verificationTokens VerificationToken[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId

  @@unique([identifier, token])
  @@index([userId])
}

model Article {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String        @unique
  content     Json
  excerpt     String?
  coverImage  String?
  status      ArticleStatus @default(DRAFT)
  viewCount   Int           @default(0)
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String        @db.ObjectId
  tags        ArticleTag[]
  comments    Comment[]
  bookmarks   Bookmark[]
  likes       Like[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Tag {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String        @unique
  slug      String        @unique
  articles  ArticleTag[]
  createdAt DateTime      @default(now())
}

model ArticleTag {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String   @db.ObjectId
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([articleId, tagId])
  @@index([tagId])
}

model Bookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, articleId])
}

model Comment {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  article     Article       @relation(fields: [articleId], references: [id])
  articleId   String        @db.ObjectId
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String        @db.ObjectId
  parentId    String?       @db.ObjectId
  parent      Comment?      @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies     Comment[]     @relation("CommentReplies")
  likes       CommentLike[]
  likesCount  Int           @default(0)
  isApproved  Boolean       @default(true)
  isSpam      Boolean       @default(false)
  userAgent   String?
  ipAddress   String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([articleId])
  @@index([authorId])
  @@index([isApproved])
  @@index([isSpam])
}

model CommentLike {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  comment     Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId   String    @db.ObjectId
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())

  @@unique([userId, commentId])
  @@index([commentId])
  @@index([userId])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
  @@index([articleId])
  @@index([userId])
}

model AuditLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  action      String
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  targetType  String
  targetId    String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([targetType, targetId])
}
